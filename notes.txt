jwt - a server authenticates a user, generates a JWT containing user information and sends it to the client. 
the client then includes this jwt in subsequent requests to access protected resources which the server verifies to grant access

Auth and jwt generation:
- User provides credentails to the server
- Server validates
- successful validation leads to a jwt being created and signed using a secret key (public/private key pair)
- server sends the jwt back to the client

Client side usages:
- client stores the jwt in local storage, session storage or a secure cookie
- for each subsequent request to protected resources, the client includes the JWT in the authorization header
(typically known as the bearer token)

SS verifies:
- server receives request with JWT token in auth header
- validates jwt signature using the same secrety key ( or public key )
- if the jwt is valid, the server extracts the user info from the jwt and uses it to determine if the user is authorized to access 
the requested resource
- if authorized, the server returns the requested data, otherewise, it returns an error

Example: 
- user logs in or signs uppercase
- server creates jwt with the username, pass and role
- server sends the jwt back to the client 
- the client stores the jwt
- the client sends the jwt in the auth header when making a request to a protected API endpoint
- the server verifies the jwt and grants access 

Key points:
- store secret key on the server and never expose it to the client 
- set a reasonable token expiration 

res.send() vs res.sendFile():
- .send(): 
    - can handle various response types such as plain text, json and html
    - automatically sets the appropiate content type based on the data sent

    Example:
    - res.send("hello world")
    - res.send({message: "Success", data: {name: 'John', age: '30'}})

- .sendFile():
    - great for serving specific files to the clients such as html documents, iamges, css and other static resources

    Example:
    - res.sendFile('index.html', {root:__dirname})
    - res.sendFile('image.jpg', {root: __dirname + '/public'})

Challenging stuff and how i fixed it:

Session middleware order:
- Login wasnt rerouting to our homepage and I was very confused until I read that i needed to move my middleware 
above all routes and static handling first because it was registered too late in teh stack
- always register session and cookie parser middleware before any routes or static file usage 

Protected route positioning:
- Same as above, protected homepage was being overrideen by express static which made it public accessible
- protected routes must come before express static so express checks your middleware first

Session persistance on login:
- wasnt sticking due to missing middleware or incorrect credentails in fetch()
- when using express session i need to use the session middleware early and cookie credentials: "include"

Debugging error after error with message route 
    - Error 401 unauthorized
        - TC didnt have my session cookie, didnt even think about needing to be logged so i was confused at first
        - signed in via website but then realized that browser sessions dont carry into TC, especially since HTTP is stateless
    - Solution
        - signed up (once) and logged in via TC post requests to the appropiate routes


    - Error: Cannot destructure property 'content' of req.body.text
        - tried sending { "content": "First message" } via post request and tried grabbing it using const { content } = req.body.text
        
        - req.body is an entire body of data that the frontend sends in a POST request
        - it is an object so whatever the client sends in a request body will then be parsed by express and put inside req.body
        - example: 
            - Frontend sends post request ... { "content": "message!" }
            - Backend req.body receives it as { "content": "message!" }
            - req.body is the the  whole body, req.body.content is "message!"
        - req.body PROS
            - since the entire request body object is taken into account, you can access everything
        - req.body CONS
            - can be messy if the body is large or not structured properly
        
        - req.body.<variable> PROS
            - can access specific fields which can be clean and direct
            - assumes that specific field is always existing so can cause errors if missing


    - Error: Cannot read properties of undefined (reading 'findById')
        - wrote const { User } = ....
        - but user model was a direct export, module.exports = User so { User } was undefined
        - tried to destructure something that wasnt exported as an object

Setting up message sending
    - When building api/messages route, added a get request to fetch message from oldest to newest
        - used sid to verify user is logged  in 
        - validated content

Testing message POSTing through TC
    - Error 401 unauthorized
        - Realized TC doesnt carry over browser sessions
    - Solution: 
        - added it as a manual cookie header 

